openapi: 3.0.0
info:
  title: Task Manager API
  description: API for managing tasks
  version: 1.0.0
servers:
  - url: http://localhost:8000
    description: Local development server
paths:
  /tasks:
    post:
      summary: Create a new task
      operationId: createTask
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /tasks/{taskId}:
    get:
      summary: Get a task by ID
      operationId: getTaskById
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
    put:
      summary: Update a task by ID
      operationId: updateTask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
    delete:
      summary: Delete a task by ID
      operationId: deleteTask
      tags:
        - Tasks
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
  /users:
    get:
      summary: Получить список всех пользователей
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Создать нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Получить пользователя по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Обновить пользователя по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Пользователь успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Удалить пользователя по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Пользователь успешно удален
  /users/getTasks/{id}:
    get:
          summary: Получить все таски для юзера
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: integer
          responses:
            '200':
              description: Успешный запрос
              content:
                application/json:
                  schema:
                    type: array
                    $ref: '#/components/schemas/Task'
components:
  schemas:
    User:
      type: object
      required:
        - name
        - email
        - id
        - status
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Naruto"
        email:
          type: string
          format: email
          example: "lalka@gmail.com"
        status:
          type: string
          example: "active"
    Task:
      type: object
      required:
        - id
        - title
        - status
      properties:
        id:
          type: string
          example: "123e4567-e89b-12d3-a456-426614174000"
        title:
          type: string
          example: "Buy groceries"
        description:
          type: string
          example: "Buy milk, bread, and eggs"
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: "pending"
        
