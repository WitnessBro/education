// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for TaskStatus.
const (
	Completed  TaskStatus = "completed"
	InProgress TaskStatus = "in_progress"
	Pending    TaskStatus = "pending"
)

// Task defines model for Task.
type Task struct {
	Description *string    `json:"description,omitempty"`
	Id          string     `json:"id"`
	Status      TaskStatus `json:"status"`
	Title       string     `json:"title"`
}

// TaskStatus defines model for Task.Status.
type TaskStatus string

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = Task

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = Task

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(w http.ResponseWriter, r *http.Request)
	// Create a new task
	// (POST /tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
	// Delete a task by ID
	// (DELETE /tasks/{taskId})
	DeleteTask(w http.ResponseWriter, r *http.Request, taskId string)
	// Get a task by ID
	// (GET /tasks/{taskId})
	GetTaskById(w http.ResponseWriter, r *http.Request, taskId string)
	// Update a task by ID
	// (PUT /tasks/{taskId})
	UpdateTask(w http.ResponseWriter, r *http.Request, taskId string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get all tasks
// (GET /tasks)
func (_ Unimplemented) GetTasks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task
// (POST /tasks)
func (_ Unimplemented) CreateTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a task by ID
// (DELETE /tasks/{taskId})
func (_ Unimplemented) DeleteTask(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a task by ID
// (GET /tasks/{taskId})
func (_ Unimplemented) GetTaskById(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a task by ID
// (PUT /tasks/{taskId})
func (_ Unimplemented) UpdateTask(w http.ResponseWriter, r *http.Request, taskId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTasks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, chi.URLParam(r, "taskId"), &taskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTask(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetTaskById operation middleware
func (siw *ServerInterfaceWrapper) GetTaskById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, chi.URLParam(r, "taskId"), &taskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskById(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "taskId", runtime.ParamLocationPath, chi.URLParam(r, "taskId"), &taskId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "taskId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTask(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks", wrapper.GetTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/tasks/{taskId}", wrapper.DeleteTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/tasks/{taskId}", wrapper.GetTaskById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/tasks/{taskId}", wrapper.UpdateTask)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SVz0/bMBTH/xXrbceUpKUUlhsMaaq0SRzYaaqm1/g1NTi2ZztsUZX/fbJdCm060A5j",
	"J6fJ+/X9+PvUDVS6MVqR8g7KDbhqTQ3Gx1t09+E0VhuyXlB8y8lVVhgvtAo/6Rc2RhKUcNV2rBHyPmNL",
	"S8gzhoozqmsHGfjOhBDnrVA19BkIvp88npzS9Gx2PqKLD8vReMJPRzg9m42mk9lsPB2fT4uiOFbHefRt",
	"nItU20D5DQwpHj5mINR3Y3VtyYURgkxJnjgssmeNn8IHtb3wIeRQY211RTbQGOT0GVj60QpLPIwiODxW",
	"2U262CXp5R1VHvqQJdRKD+DC5c2crbRlDSqshaqZR3fvdjXLeEPsS/hKll3ezCGDB7IuZY9PipMi6NCG",
	"FBoBJZzGVxkY9OsILU8Vyw3U5MMRbhpD+zmHEj6Rv922tOSMVi55YFIU4ai08qRiHhojRRUz8zuXrJGs",
	"FJ6EpyYmvre0ghLe5U+my7eOy6Pd+h0etBa7ROeACpPCeaZXWxwhwrVNg7ZLIzOU8gkV1i7cRdKx6DMw",
	"2h2R+tESeoozpEsk56807/5K5+vy9i3ibUv9gO34H/TcRxh9U0XFnLm2qsi5VStldwAzQWHIFP2MRI8A",
	"7bOti/JNOOa8T0YOuzbEfB3fbzEbtNiQJxsKbkCE0YI1IQOFTTBBqgiHzLJn+g9XcDHgOR1uVgSQZnwR",
	"QBqXYRTPlh2bXx/11Evbc9VFBW8ktngb83DyKOTR5XuNlWmPsPpqOL6BL/7nWhd/sGEbpb9ow0TnNbQx",
	"h+zDI7f9Xp91hZJxeiCpTUPKsxQLGbRWQglr702Z5zLErbXz5UX4z+0X/e8AAAD//7994+8jCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
